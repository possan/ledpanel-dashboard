
// https://github.com/tompreston/4x5-Font/blob/master/4x5-font.js
var font4x5 = {
  '':  [0x0, 0x0, 0x0, 0x0, 0x0],
  '!': [0x4, 0x4, 0x4, 0x0, 0x4],
  '#': [0x6, 0xf, 0x6, 0xf, 0x6],
  '\'':[0x0, 0xa, 0x0, 0x0, 0x0],
  '%': [0x7, 0xe, 0x4, 0x7, 0xe],
  '$': [0x7, 0xa, 0x6, 0x5, 0xe],
  '"': [0x1, 0x2, 0x0, 0x0, 0x0],
  '&': [0x2, 0x5, 0x6, 0xa, 0x5],
  ')': [0x4, 0x2, 0x2, 0x2, 0x4],
  '(': [0x4, 0x8, 0x8, 0x8, 0x4],
  '+': [0x0, 0x2, 0x7, 0x2, 0x0],
  '*': [0x0, 0x6, 0xf, 0x6, 0x0],
  '-': [0x0, 0x0, 0x0, 0xf, 0x0],
  ',': [0x0, 0x0, 0x0, 0x2, 0x4],
  '/': [0x1, 0x1, 0x2, 0x4, 0x8],
  '.': [0x0, 0x0, 0x0, 0x0, 0x4],
  '1': [0x2, 0x6, 0x2, 0x2, 0x2],
  '0': [0x6, 0xb, 0xf, 0xd, 0x6],
  '3': [0xe, 0x1, 0x6, 0x1, 0xe],
  '2': [0xe, 0x1, 0x6, 0x8, 0xf],
  '5': [0xf, 0x8, 0xe, 0x1, 0xe],
  '4': [0x2, 0x6, 0xa, 0xf, 0x2],
  '7': [0xf, 0x1, 0x2, 0x4, 0x8],
  '6': [0x6, 0x8, 0xe, 0x9, 0x6],
  '8': [0x6, 0x9, 0x6, 0x9, 0x6],
  '9': [0x6, 0x9, 0xf, 0x1, 0x6],
  ':': [0x0, 0x4, 0x0, 0x4, 0x0],
  ';': [0x0, 0x4, 0x0, 0x4, 0x8],
  '<': [0x2, 0x4, 0x8, 0x4, 0x2],
  '=': [0x0, 0xf, 0x0, 0xf, 0x0],
  '>': [0x4, 0x2, 0x1, 0x2, 0x4],
  '?': [0x6, 0x9, 0x2, 0x0, 0x2],
  '@': [0x6, 0xd, 0xb, 0x8, 0x6],
  'A': [0x4, 0xa, 0xe, 0xa, 0xa],
  'B': [0xe, 0x9, 0xe, 0x9, 0xe],
  'C': [0x6, 0x9, 0x8, 0x9, 0x6],
  'D': [0xe, 0x9, 0x9, 0x9, 0xe],
  'E': [0xf, 0x8, 0xe, 0x8, 0xf],
  'F': [0xf, 0x8, 0xe, 0x8, 0x8],
  'G': [0x6, 0x8, 0xb, 0x9, 0x6],
  'H': [0x9, 0x9, 0xf, 0x9, 0x9],
  'I': [0xe, 0x4, 0x4, 0x4, 0xe],
  'J': [0x1, 0x1, 0x1, 0x9, 0x6],
  'K': [0x9, 0xa, 0xc, 0xa, 0x9],
  'L': [0x8, 0x8, 0x8, 0x8, 0xf],
  'M': [0x9, 0xf, 0xf, 0x9, 0x9],
  'N': [0x9, 0xd, 0xf, 0xb, 0x9],
  'O': [0x6, 0x9, 0x9, 0x9, 0x6],
  'P': [0xe, 0x9, 0xe, 0x8, 0x8],
  'Q': [0x6, 0x9, 0x9, 0xb, 0x7],
  'R': [0xe, 0x9, 0xe, 0xa, 0x9],
  'S': [0x7, 0x8, 0x6, 0x1, 0xe],
  'T': [0xe, 0x4, 0x4, 0x4, 0x4],
  'U': [0x9, 0x9, 0x9, 0x9, 0x6],
  'V': [0x9, 0x9, 0x9, 0x6, 0x6],
  'W': [0x9, 0x9, 0xf, 0xf, 0x9],
  'X': [0x9, 0x9, 0x6, 0x9, 0x9],
  'Y': [0x9, 0x5, 0x2, 0x2, 0x2],
  'Z': [0xf, 0x2, 0x4, 0x8, 0xf],
  '[': [0xe, 0x8, 0x8, 0x8, 0xe],
  '\\': [0x8, 0x8, 0x4, 0x2, 0x1],
  ']': [0x7, 0x1, 0x1, 0x1, 0x7],
  '^': [0x4, 0xa, 0x0, 0x0, 0x0],
  '_': [0x0, 0x0, 0x0, 0x0, 0xf],
  '`': [0x4, 0x2, 0x0, 0x0, 0x0],
  'a': [0x0, 0x5, 0xb, 0xb, 0x5],
  'b': [0x8, 0x8, 0xe, 0x9, 0xe],
  'c': [0x0, 0x7, 0x8, 0x8, 0x7],
  'd': [0x1, 0x1, 0x7, 0x9, 0x7],
  'e': [0x0, 0x6, 0xf, 0x8, 0x7],
  'f': [0x3, 0x4, 0xe, 0x4, 0x4],
  'g': [0x7, 0x9, 0x7, 0x1, 0x7],
  'h': [0x8, 0x8, 0xe, 0x9, 0x9],
  'i': [0x0, 0x2, 0x0, 0x2, 0x2],
  'j': [0x1, 0x0, 0x1, 0x1, 0x6],
  'k': [0x8, 0xa, 0xc, 0xa, 0x9],
  'l': [0xc, 0x4, 0x4, 0x4, 0xe],
  'm': [0x0, 0x9, 0xf, 0xf, 0x9],
  'n': [0x0, 0xe, 0x9, 0x9, 0x9],
  'o': [0x0, 0x6, 0x9, 0x9, 0x6],
  'p': [0x0, 0xe, 0x9, 0xe, 0x8],
  'q': [0x0, 0x6, 0x9, 0x7, 0x1],
  'r': [0x0, 0xb, 0xc, 0x8, 0x8],
  's': [0x0, 0x7, 0x4, 0x2, 0xe],
  't': [0x4, 0xe, 0x4, 0x4, 0x3],
  'u': [0x0, 0x9, 0x9, 0x9, 0x6],
  'v': [0x0, 0x9, 0x9, 0x6, 0x6],
  'w': [0x0, 0x9, 0xf, 0xf, 0x6],
  'x': [0x0, 0x9, 0x6, 0x6, 0x9],
  'y': [0x0, 0x9, 0x7, 0x1, 0x6],
  'z': [0x0, 0xf, 0x2, 0x4, 0xf],
  '{': [0x6, 0x4, 0xc, 0x4, 0x6],
  '|': [0x4, 0x4, 0x0, 0x4, 0x4],
  '}': [0xc, 0x4, 0x6, 0x4, 0xc],
  '~': [0x0, 0x0, 0x5, 0xa, 0x0],
};

var PixelBuffer = function() {
  this.pixels = new Array(64*16);
  this.clear();
}

PixelBuffer.prototype.clear = function() {
  for(var o=0; o<16*64; o++) {
    this.pixels[o] = false;
  }
}

PixelBuffer.prototype.copyFrom = function(other) {
  for(var o=0; o<16*64; o++) {
    this.pixels[o] = other.pixels[o];
  }
}

PixelBuffer.prototype.setPixel = function(x, y, on) {
  if (x < 0 || y < 0 || x >= 64 || y >= 16) {
    return;
  }
  this.pixels[Math.floor(y) * 64 + Math.floor(x)] = on;
}

PixelBuffer.prototype.getPixel = function(x, y) {
  if (x < 0 || y < 0 || x >= 64 || y >= 16) {
    return false;
  }
  return this.pixels[Math.floor(y) * 64 + Math.floor(x)];
}

PixelBuffer.prototype.drawChar = function(ch, x, y) {
  var chardata = font4x5[ch];
  // console.log('drawChar', ch, chardata);
  if (chardata) {
    for(var r=0; r<5; r++) {
      for(var c=0; c<4; c++) {
        var b = chardata[r];
        var mask = 1 << (3-c);
        if ((b & mask) == mask) {
          this.setPixel(x+c, y+r, true);
        }
      }
    }
  }
}

PixelBuffer.prototype.drawString = function(str, x, y, spacing) {
  for(var c=0; c<str.length; c++) {
    this.drawChar(str.substring(c, c+1), x + c*(5 + spacing || 0), y);
  }
}

PixelBuffer.prototype.drawLine = function(x0, y0, x1, y1, on) {
  x0 = Math.round(x0);
  y0 = Math.round(y0);
  x1 = Math.round(x1);
  y1 = Math.round(y1);
  var dx = Math.abs(x1-x0);
  var dy = Math.abs(y1-y0);
  var sx = (x0 < x1) ? 1 : -1;
  var sy = (y0 < y1) ? 1 : -1;
  var err = dx-dy;

  while(true) {
    this.setPixel(x0, y0, on);
    if (Math.abs(x0-x1) < 0.1 && Math.abs(y0-y1) < 0.1) break;
    var e2 = 2 * err;
    if (e2 >-dy) { err -= dy; x0  += sx; }
    if (e2 < dx) { err += dx; y0  += sy; }
  }
}

PixelBuffer.prototype.dither = function() {
  for(var y=0; y<16; y++) {
    for(var x=0; x<64; x++) {

      // oldpixel  := pixel[x][y]
      // newpixel  := find_closest_palette_color(oldpixel)
      var oldpixel = this.getPixel(x, y);
      var newpixel = oldpixel > 128 ? 255 : 0;

      // pixel[x][y]  := newpixel
      this.setPixel(x, y, newpixel);

      // quant_error  := oldpixel - newpixel
      var quant_error = oldpixel - newpixel;

      // pixel[x+1][y  ] := pixel[x+1][y  ] + quant_error * 7/16
      // pixel[x-1][y+1] := pixel[x-1][y+1] + quant_error * 3/16
      // pixel[x  ][y+1] := pixel[x  ][y+1] + quant_error * 5/16
      // pixel[x+1][y+1] := pixel[x+1][y+1] + quant_error * 1/16
      this.setPixel(x+1,y, this.getPixel(x+1,y) + quant_error*7/16);
      this.setPixel(x-1,y+1, this.getPixel(x-1,y+1) + quant_error*3/16);
      this.setPixel(x,y+1, this.getPixel(x,y+1) + quant_error*5/16);
      this.setPixel(x+1,y+1, this.getPixel(x+1,y+1) + quant_error*1/16);
    }
  }
}

exports.PixelBuffer = PixelBuffer;

function lerp(i,in0,in1,out0,out1) {
  var f = (i - in0) / (in1 - in0);
  f = (f * (out1 - out0)) + out0;
  return f;
}

exports.lerp = lerp;

